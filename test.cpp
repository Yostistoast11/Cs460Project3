// Autogenerated Scheme to C++ Code
// File: test.cpp
#include <iostream>
#include "Object.cpp"
using namespace std;

Object insert_last(Object ls, Object v){
	if(listp(ls)){
		if(nullp(ls)){
			return cons(v , Object("()"));
		}
		else{
			return cons(listop("car" , ls) , insert_last(listop("cdr" , ls) , v));
		}
	}
	else{
		return Object("first_argument_of_insert_last_must_be_a_list");
	}
	return Object(0);
}
Object list_reverse(Object ls){
	if(listp(ls)){
		if(nullp(ls)){
			return Object("()");
		}
		else{
			return insert_last(list_reverse(listop("cdr" , ls)) , listop("car" , ls));
		}
	}
	else{
		return Object("list_reverse_requires_a_list_argument");
	}
	return Object(0);
}
int main(){
	cout << list_reverse(Object("(indentifier numeric literal cons if display newline cddr and or not define number? symbol list? zero? null? modulo string? + - / * = > < >= <= 'anything	1 1 1.01 \"HelloWorld\")"));
	cout << endl;
	cout << cons(Object("a") , Object("b"));
	cout << endl;
	return 0;
}
